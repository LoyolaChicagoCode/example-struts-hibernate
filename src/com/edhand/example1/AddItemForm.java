package com.edhand.example1;

import javax.servlet.http.HttpServletRequest;

import org.apache.struts.action.ActionError;
import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionMapping;

/**
 * Stores information related to an <code>Item</code>
 * within the Struts framework.  Also provides validation on the Item's name.
 * 
 * Copyright 2003 Edward Hand
 * 
 * @author Edward Hand
 *
 */
public class AddItemForm extends ActionForm
{
	private String name;
	private String description;

	/**
	* validate() ensures the user's item is valid and returns the appropriate <code>ActionErrors</code>
	* object, if any errors are generated.
	* 
	* @return <code>ActionErrors</code> A collection of errors generated by validation process.
	* 
	 */
	public ActionErrors validate(
		ActionMapping mapping,
		HttpServletRequest request)
	{
		/*
		 * Create new ActionErrors object to hold any errors we discover
		 * upon validation of the form's fields.
		 * 
		 */
		ActionErrors errors = new ActionErrors();

		/*
		 * Check the name field to ensure that it is neither empty nor
		 * contains a zero length string.
		 * 
		 */
		if (name == null || name.length() < 1)
		{
			/*
			 * Create a new ActionError item, using the "errros.required" property
			 * found in application.properties:
			 * 
			 * errors.required={0} is required.
			 * 
			 * The "Name" string will replace the {0} tag found in the properties.
			 * 
			 * The AddItem.jsp page will be reloaded, and the <html:errors /> tag
			 * will be replaced with a list of errors.  The first item will be:
			 * 
			 * Name is required.
			 * 
			 */
			errors.add("name", new ActionError("errors.required", "Name"));

		}

		return errors;
	}

	/**
	 * Clears the object prior to each request. 
	 * 
	 */
	public void reset(ActionMapping mapping, HttpServletRequest request)
	{
		this.clear();
	}

	/**
	 * getDescription() retrieves <code>description</code> field.
	 * 
	 */
	public String getDescription()
	{
		return description;
	}

	/**
	 * getName() retrieves <code>name</code> field.
	 * 
	 */
	public String getName()
	{
		return name;
	}

	/**
	 * setDescription() sets <code>description</code> field.
	 * 
	 */
	public void setDescription(String description)
	{
		this.description = description;
	}

	/**
	 * Sets <code>name</code> field.
	 * 
	 */
	public void setName(String name)
	{
		this.name = name;
	}

	/**
	 *
	 * clear() sets all the object's fields to <code>null</code>.
	 *
	 */
	public void clear()
	{
		this.name = null;
		this.description = null;
	}

}
